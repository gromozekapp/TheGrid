//
//  CellView.swift
//  TheGrid
//
//  Created by Daniil Zolotarev on 27.09.24.
//

import SwiftUI

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–µ—Ç–∫–∏ –Ω–∞ –ø–æ–ª–µ
struct Cell {
    var isWall: Bool = false
    var isTarget: Bool = false
    var hasBox: Bool = false
    var hasPlayer: Bool = false
}

struct CellView: View {
    @StateObject var viewModel = GameViewModel() // –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤–∞–º–∏ ViewModel
    let cell: Cell

    var body: some View {
        Rectangle()
            .fill(cell.isTarget ? Color.green : Color.gray.opacity(0.5))
            .overlay(
                Group {
                    if cell.isWall {
                        Rectangle().fill(Color.gray.opacity(0.5))
                        Text("ü™®").font(.custom("Georgia", size: 45, relativeTo: .body))
                    }
                    if cell.isTarget {
                        Rectangle().fill(Color.gray.opacity(0.5))
                        if viewModel.isGameWon() {
                            Text("ü™∫").font(.custom("Georgia", size: 50, relativeTo: .body))
                        } else {
                            Text("ü™π").font(.custom("Georgia", size: 50, relativeTo: .body))
                        }
                    }
                    
                    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞
                    if cell.hasPlayer {
                        Circle()
                            .fill(Color.gray.opacity(0.5))
                            .overlay(
                                Text("üêî").font(.custom("Georgia", size: 50, relativeTo: .body))
                            )
                            .transition(.scale) // –ü–æ—è–≤–ª–µ–Ω–∏–µ —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    } else if cell.hasBox {
                        Rectangle().fill(Color.gray.opacity(0.5))
                        Text("ü•ö").font(.custom("Georgia", size: 40, relativeTo: .body))
                    }
                }
            )
            .frame(width: 50, height: 50)
            .animation(.easeInOut(duration: 0.3), value: cell.hasPlayer) // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }
}

struct CellView_Previews: PreviewProvider {
    static var previews: some View {
        // –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π —è—á–µ–π–∫–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        let testCell = Cell(isWall: false, isTarget: false, hasBox: false, hasPlayer: true)
        CellView(cell: testCell)  // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    }
}
